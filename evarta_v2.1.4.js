// localStorage
function getClickedLinks() {
    let nameStorage = 'selectedLinks' + window.location.search;
    return (localStorage.getItem(nameStorage) != undefined)
        ? JSON.parse(localStorage.getItem(nameStorage)) : [];
}
function setClickedLinks(link, selectedLinks) {
    let id = getLinkId(link);
    let nameStorage = 'selectedLinks' + window.location.search;
    if (!selectedLinks.includes(id)) {
        selectedLinks.push(id);
        localStorage.setItem(nameStorage, JSON.stringify(selectedLinks));
    }
}
function isClickedLink(link, selectedLinks) {
    let id = getLinkId(link);
    if (selectedLinks.includes(id)) {
        return true;
    }
    return false;
}
//link ID
function getLinkId(url) {
    let linkArr = url.split('/')
    return linkArr[linkArr.length - 2] + '/' + linkArr[linkArr.length - 1];
}
//log ID
function getLogId(url) {
    let parts = url.split('/');
    do {
        lastPart = parts.pop();
    } while (lastPart.trim() === "" && parts.length > 0);
    return lastPart;
}
//–§–æ—Ä–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ª–∏—Å—Ç (–ª–∏—Å—Ç–∏ —ñ–∑ —Å–∫–∞–Ω–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤)
function getEmlUrl(fileUrl) {
    return fileUrl.replace('takeDir.php?n=', '/').replace('/alarm/', '/tmp/scan/').replace('_', '/').replace(/\/+$/, '.eml');
}

// –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –¥–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –∑ —Ç–µ–∫—Å—Ç–æ–º –ª–æ–≥—É
async function loadTextFile(url, id) {
    try {
        const response = await fetch(url);
        const data = await response.text();
        const paragraph = document.createElement("p");
        paragraph.style.backgroundColor = '#333333';
        paragraph.style.color = '#e0e0e0';
        paragraph.textContent = data;
        const targetElement = document.getElementById(id);
        if (targetElement) {
            targetElement.appendChild(paragraph);
        } else {
            console.error(`–ï–ª–µ–º–µ–Ω—Ç –∑ id "${id}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.`);
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É:', error);
    }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ div –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏
function getLinks(url, selectedLinks) {
    return fetch(url)
        .then(response => response.text())
        .then(data => {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç DOM –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            let parser = new DOMParser();
            let htmlDoc = parser.parseFromString(data, 'text/html');
            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (a) –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
            let links = htmlDoc.querySelectorAll('table a');
            // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç div
            let id = getLogId(url);
            let div = document.createElement('div');
            div.setAttribute('id', id);
            div.style.border = '5px solid black';
            div.style.marginBottom = '30px';
            div.style.backgroundColor = '#e0e0e0';
            // –î–æ–¥–∞—î–º–æ –∫–æ–∂–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–æ –Ω–æ–≤–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ div
            links.forEach(link => {
                let fileUrl = link.getAttribute("href");
                if (fileUrl.substr(fileUrl.length - 4) === ".log") {
                    if (fileUrl.includes("Eml_N")) {
                        loadTextFile(link, id);
                    }
                } else {
                    link.style.fontWeight = 'bold';
                    if (isClickedLink(fileUrl, selectedLinks)) {
                        link.style.color = '#b2b2b2';
                    } else if (fileUrl.substr(fileUrl.length - 4) === ".eml") {
                        link.style.color = '#cc0000';
                        link.classList.add('eml');
                        link.classList.add('doc');
                        link.removeAttribute('target');
                    } else {
                        link.style.color = '#cca300';
                    }
                }
                div.appendChild(link);
                div.appendChild(document.createElement('br'));
            });

            if (url.includes(".ip6")) {
                let emlLink = document.createElement('a');
                const emlUrl = getEmlUrl(url);
                emlLink.setAttribute('href', emlUrl);
                emlLink.innerHTML = emlUrl.split('/').pop();
                emlLink.style.fontWeight = 'bold';
                emlLink.style.color = isClickedLink(emlUrl, selectedLinks) ? '#b2b2b2' : '#cc0000';
                emlLink.classList.add('eml');
                emlLink.classList.add('img');
                emlLink.removeAttribute('target');
                div.appendChild(emlLink);
            }

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç diva
            return div;
        })
        .catch(error => {
            console.error('–ü–æ–º–∏–ª–∫–∞:', error);
            return null;
        });
}

// –î–æ–¥–∞—î–º–æ div –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
function appendElements(selectedLinks) {
    let ids = [];
    let tableRows = document.querySelectorAll("table > tbody > tr");
    let chunkSize = 100;
    let delay = 1000; // 1 second delay

    let processChunk = function(chunk) {
        chunk.forEach(function(row) {
            let firstChild = row.children[0];
            if (firstChild) {
                let report = firstChild.children[0];
                if (report) {
                    let reportUrl = report.getAttribute("href");
                    report.style.color = "#b2b2b2";
                    if (reportUrl.includes("Eml_N") || reportUrl.includes(".ip6")) {
                        getLinks(reportUrl, selectedLinks).then(domObject => {
                            if (domObject) {
                                firstChild.appendChild(domObject);
                                ids.push(domObject.id);
                            } else {
                                console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±\'—î–∫—Ç–∞ DOM');
                            }
                        });
                    }
                }
            }
        });
    };

    let processTableRow = function(index) {
        let start = index * chunkSize;
        let end = Math.min(start + chunkSize, tableRows.length - 1);
        let chunk = Array.from(tableRows).slice(start, end);
        processChunk(chunk);

        if (end < tableRows.length - 1) {
            setTimeout(function() {
                processTableRow(index + 1);
            }, delay);
        }
    };

    processTableRow(0);

    return ids;
}

/*----------------------- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∞—á—É–≤–∞–Ω–Ω—è -----------------------*/

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∞—á—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
async function clickLinks(selectedLinks, searchString) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å searchString
    if (searchString && typeof searchString === 'string') {
        let count = 0;
        const isTag = searchString.startsWith('#');
        const links = isTag
            ? document.getElementsByClassName(searchString.slice(1))
            : document.getElementsByClassName('eml');

        for (const link of links) {
            const fileUrl = link.getAttribute("href");
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ (—Ç–µ–≥) –∞–±–æ –ø—Ä–∏—Å—É—Ç–Ω—ñ—Å—Ç—å —Å–ª–æ–≤–∞ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ñ (–ª–æ–≥)
            if (!isClickedLink(fileUrl, selectedLinks)
                && (isTag || Array.from(link.parentNode.children).find((sibling) => sibling.tagName.toLowerCase() === 'p' && sibling.textContent.includes(searchString)))){
                // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–¥—ñ—é –∫–ª—ñ–∫—É
                const clickEvent = new MouseEvent('click', {
                    bubbles: true,
                    cancelable: true,
                    view: window
                });
                // –ß–µ–∫–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º –∫–ª—ñ–∫–æ–º
                await new Promise(resolve => setTimeout(resolve, 100));
                // –°–∏–º—É–ª—é—î–º–æ –∫–ª—ñ–∫ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—ñ
                link.dispatchEvent(clickEvent);
                count++;
            }
        }
        console.log(count);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–ª–∏–∫—É –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ—à—É–∫—É
function performSearch() {
    const searchInput = document.getElementById('searchInput');
    const searchString = searchInput.value.trim();
    // –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó clickLinks –∑ –Ω–æ–≤–∏–º —Ä—è–¥–∫–æ–º –ø–æ—à—É–∫—É
    clickLinks(selectedLinks, searchString);
}

// –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –ø–æ—à—É–∫—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
function appendSearchElement() {
    const searchContainer = document.createElement('div');
    searchContainer.id = 'searchContainer';
    const input = document.createElement('input');
    input.type = 'text';
    input.id = 'searchInput';
    input.style.padding = '1px 4px';
    input.style.minWidth = '200px';
    const button = document.createElement('button');
    button.textContent = 'üì•';
    button.onclick = performSearch;
    searchContainer.appendChild(input);
    searchContainer.appendChild(button);
    document.body.appendChild(searchContainer);
    searchContainer.style.position = 'fixed';
    searchContainer.style.top = '0';
    searchContainer.style.right = '0';
    searchContainer.style.padding = '10px';
    searchContainer.style.margin = '20px';
    searchContainer.style.transform = 'scale(1.5)';
    searchContainer.style.transformOrigin = 'top right';
    const optionsContainer = document.createElement('div');
    optionsContainer.id = 'optionsContainer';
    optionsContainer.style.backgroundColor = '#fff';
    optionsContainer.style.fontSize = 'smaller';
    searchContainer.appendChild(optionsContainer);
}

/*----------------------- –í–∏–∫–æ–Ω–∞–Ω–Ω—è -----------------------*/

// –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–ª—ñ–∫ –ø–æ—Å–∏–ª–∞–Ω—å —è–∫—ñ –≤–∂–µ –Ω–∞—Ç–∏—Å–∫–∞–ª–∏
let selectedLinks = getClickedLinks();

// –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏
appendElements(selectedLinks);

// –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫–∞ –¥–æ –≤—Å—å–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—É
document.addEventListener("click", function (event) {
    let target = event.target;
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–ª—ñ–∫ –±—É–≤ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—ñ
    if (target.tagName === "A") {
        let selectedLink = target.getAttribute('href');
        setClickedLinks(selectedLink, selectedLinks);
        target.style.color = "#b2b2b2";
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –µ–ª–µ–º–µ–Ω—Ç, —è–∫–∏–π —Å–ø—Ä–∏—á–∏–Ω–∏–≤ –ø–æ–¥—ñ—é, —î –ø–æ–ª–µ–º –≤–≤–æ–¥—É searchInput
    if (event.target && event.target.id === 'searchInput') {
        const userInput = event.target.value;
        // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∏–ø–∞–¥–∞—é—á–æ–≥–æ —Å–ø–∏—Å–∫—É
        const optionsContainer = document.getElementById('optionsContainer');
        // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
        optionsContainer.innerHTML = '';
        // –Ø–∫—â–æ –ø–æ–ª–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç
        if (userInput) {
            const options = ['–¥–ª—è —Å–ª—É–∂–±–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è', '#eml', '#doc', '#img'];
            // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–∞ –≤–≤–µ–¥–µ–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º
            const filteredOptions = options.filter(option =>
                option.toLowerCase().startsWith(userInput.toLowerCase())
            );
            // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∏–ø–∞–¥–∞—é—á–∏–π —Å–ø–∏—Å–æ–∫
            filteredOptions.forEach(option => {
                const listItem = document.createElement('div');
                listItem.textContent = option;
                listItem.classList.add('option');
                listItem. style.borderBottom = 'solid 1px #5d7a8c';
                // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –¥–ª—è –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥—É
                listItem.addEventListener('click', function () {
                    event.target.value = option;
                    optionsContainer.innerHTML = '';
                    event.target.focus();
                });
                // –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –≤–∏–ø–∞–¥–∞—é—á–æ–≥–æ —Å–ø–∏—Å–∫—É –¥–æ DOM
                optionsContainer.appendChild(listItem);
            });
        } else {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∏–ø–∞–¥–∞—é—á–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—ñ
            const options = ['–¥–ª—è —Å–ª—É–∂–±–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è', '#eml', '#doc', '#img'];
            options.forEach(option => {
                const listItem = document.createElement('div');
                listItem.textContent = option;
                listItem.classList.add('option');
                listItem. style.borderBottom = 'solid 1px #5d7a8c';
                // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –¥–ª—è –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥—É
                listItem.addEventListener('click', function () {
                    event.target.value = option;
                    optionsContainer.innerHTML = '';
                    event.target.focus();
                });
                // –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –≤–∏–ø–∞–¥–∞—é—á–æ–≥–æ —Å–ø–∏—Å–∫—É –¥–æ DOM
                optionsContainer.appendChild(listItem);
            });
        }
    }

});

// –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –ø–æ—à—É–∫—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
appendSearchElement();

// –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ Enter
document.body.addEventListener('keypress', function (e) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–ª–∞–≤—ñ—à–∞ Enter
    if (e.key === 'Enter') {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø–æ–¥—ñ—è –≤—ñ–¥ searchInput
        if (e.target && e.target.id === 'searchInput') {
            // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é performSearch
            performSearch();
        }
    }
});